CCS PCH C Compiler, Version 4.124, 5967               08-abr-13 16:34

               Filename: E:\Eletronica\Projetos\DetectorDisparos\detector.lst

               ROM used: 3474 bytes (11%)
                         Largest free fragment is 29290
               RAM used: 550 (36%) at main() level
                         578 (38%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  GOTO   0786
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.2
0056:  GOTO   0060
005A:  BTFSC  F9E.2
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /* 
....................  * detector.c 
....................  * 
....................  *  Created on: 05/04/2013 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
....................  
.................... #fuses H4,NOWDT,PROTECT,NOLVP 
.................... #use delay(crystal=10MHz, clock=40MHz) 
*
011C:  MOVLW  02
011E:  MOVWF  FEA
0120:  MOVLW  23
0122:  MOVWF  FE9
0124:  MOVF   FEF,W
0126:  BZ    0144
0128:  MOVLW  0C
012A:  MOVWF  01
012C:  CLRF   00
012E:  DECFSZ 00,F
0130:  BRA    012E
0132:  DECFSZ 01,F
0134:  BRA    012C
0136:  MOVLW  F7
0138:  MOVWF  00
013A:  DECFSZ 00,F
013C:  BRA    013A
013E:  BRA    0140
0140:  DECFSZ FEF,F
0142:  BRA    0128
0144:  RETURN 0
.................... #use rs232(xmit = PIN_C6, baud = 9600) 
0146:  BCF    F94.6
0148:  BCF    F8B.6
014A:  MOVLW  08
014C:  MOVWF  01
014E:  BRA    0150
0150:  NOP   
0152:  BSF    01.7
0154:  BRA    0176
0156:  BCF    01.7
0158:  MOVLB  2
015A:  RRCF   x33,F
015C:  MOVLB  0
015E:  BTFSC  FD8.0
0160:  BSF    F8B.6
0162:  BTFSS  FD8.0
0164:  BCF    F8B.6
0166:  BSF    01.6
0168:  BRA    0176
016A:  BCF    01.6
016C:  DECFSZ 01,F
016E:  BRA    0158
0170:  BRA    0172
0172:  NOP   
0174:  BSF    F8B.6
0176:  MOVLW  01
0178:  MOVWF  00
017A:  CLRF   FE9
017C:  DECFSZ FE9,F
017E:  BRA    017C
0180:  DECFSZ 00,F
0182:  BRA    017A
0184:  MOVLW  53
0186:  MOVWF  FE9
0188:  DECFSZ FE9,F
018A:  BRA    0188
018C:  BRA    018E
018E:  NOP   
0190:  BTFSC  01.7
0192:  BRA    0156
0194:  BTFSC  01.6
0196:  BRA    016A
0198:  RETURN 0
....................  
.................... static long aux, tempo[256], cont, addr; 
.................... int *ptr; 
.................... static short ctrl; 
....................  
.................... #INT_CCP1 
.................... void irc_ccp1(void) { 
.................... 	clear_interrupt(INT_CCP1); 
*
00AE:  BCF    F9E.2
.................... 	tempo[cont++] = CCP_1 - aux; 
00B0:  MOVLB  2
00B2:  MOVFF  21C,03
00B6:  MOVF   x1B,W
00B8:  INCF   x1B,F
00BA:  BTFSC  FD8.2
00BC:  INCF   x1C,F
00BE:  MOVWF  x40
00C0:  MOVFF  03,241
00C4:  BCF    FD8.0
00C6:  RLCF   x40,W
00C8:  MOVWF  02
00CA:  RLCF   03,W
00CC:  MOVWF  03
00CE:  MOVF   02,W
00D0:  ADDLW  1B
00D2:  MOVWF  FE9
00D4:  MOVLW  00
00D6:  ADDWFC 03,W
00D8:  MOVWF  FEA
00DA:  MOVF   19,W
00DC:  SUBWF  FBE,W
00DE:  MOVWF  00
00E0:  MOVF   1A,W
00E2:  SUBWFB FBF,W
00E4:  MOVFF  00,FEF
00E8:  MOVWF  FEC
.................... 	aux = CCP_1; 
00EA:  MOVFF  FBF,1A
00EE:  MOVFF  FBE,19
.................... 	if (cont == 256) { 
00F2:  MOVF   x1B,F
00F4:  BNZ   0100
00F6:  DECFSZ x1C,W
00F8:  BRA    0100
.................... 		ctrl = 1; 
00FA:  BSF    x21.0
.................... 		setup_ccp1(CCP_OFF); 
00FC:  BSF    F94.2
00FE:  CLRF   FBD
.................... 	} 
.................... } 
....................  
0100:  BCF    F9E.2
0102:  MOVLB  0
0104:  GOTO   0060
.................... int main(void) { 
*
0786:  CLRF   FF8
0788:  BCF    FD0.7
078A:  BSF    07.7
078C:  CLRF   FEA
078E:  CLRF   FE9
0790:  BCF    F94.6
0792:  BSF    F8B.6
0794:  BSF    FC1.0
0796:  BSF    FC1.1
0798:  BSF    FC1.2
079A:  BCF    FC1.3
079C:  CLRF   19
079E:  CLRF   1A
07A0:  CLRF   1B
07A2:  CLRF   1C
07A4:  CLRF   1D
07A6:  CLRF   1E
07A8:  CLRF   1F
07AA:  CLRF   20
07AC:  CLRF   21
07AE:  CLRF   22
07B0:  CLRF   23
07B2:  CLRF   24
07B4:  CLRF   25
07B6:  CLRF   26
07B8:  CLRF   27
07BA:  CLRF   28
07BC:  CLRF   29
07BE:  CLRF   2A
07C0:  CLRF   2B
07C2:  CLRF   2C
07C4:  CLRF   2D
07C6:  CLRF   2E
07C8:  CLRF   2F
07CA:  CLRF   30
07CC:  CLRF   31
07CE:  CLRF   32
07D0:  CLRF   33
07D2:  CLRF   34
07D4:  CLRF   35
07D6:  CLRF   36
07D8:  CLRF   37
07DA:  CLRF   38
07DC:  CLRF   39
07DE:  CLRF   3A
07E0:  CLRF   3B
07E2:  CLRF   3C
07E4:  CLRF   3D
07E6:  CLRF   3E
07E8:  CLRF   3F
07EA:  CLRF   40
07EC:  CLRF   41
07EE:  CLRF   42
07F0:  CLRF   43
07F2:  CLRF   44
07F4:  CLRF   45
07F6:  CLRF   46
07F8:  CLRF   47
07FA:  CLRF   48
07FC:  CLRF   49
07FE:  CLRF   4A
0800:  CLRF   4B
0802:  CLRF   4C
0804:  CLRF   4D
0806:  CLRF   4E
0808:  CLRF   4F
080A:  CLRF   50
080C:  CLRF   51
080E:  CLRF   52
0810:  CLRF   53
0812:  CLRF   54
0814:  CLRF   55
0816:  CLRF   56
0818:  CLRF   57
081A:  CLRF   58
081C:  CLRF   59
081E:  CLRF   5A
0820:  CLRF   5B
0822:  CLRF   5C
0824:  CLRF   5D
0826:  CLRF   5E
0828:  CLRF   5F
082A:  CLRF   60
082C:  CLRF   61
082E:  CLRF   62
0830:  CLRF   63
0832:  CLRF   64
0834:  CLRF   65
0836:  CLRF   66
0838:  CLRF   67
083A:  CLRF   68
083C:  CLRF   69
083E:  CLRF   6A
0840:  CLRF   6B
0842:  CLRF   6C
0844:  CLRF   6D
0846:  CLRF   6E
0848:  CLRF   6F
084A:  CLRF   70
084C:  CLRF   71
084E:  CLRF   72
0850:  CLRF   73
0852:  CLRF   74
0854:  CLRF   75
0856:  CLRF   76
0858:  CLRF   77
085A:  CLRF   78
085C:  CLRF   79
085E:  CLRF   7A
0860:  CLRF   7B
0862:  CLRF   7C
0864:  CLRF   7D
0866:  CLRF   7E
0868:  CLRF   7F
086A:  CLRF   x80
086C:  CLRF   x81
086E:  CLRF   x82
0870:  CLRF   x83
0872:  CLRF   x84
0874:  CLRF   x85
0876:  CLRF   x86
0878:  CLRF   x87
087A:  CLRF   x88
087C:  CLRF   x89
087E:  CLRF   x8A
0880:  CLRF   x8B
0882:  CLRF   x8C
0884:  CLRF   x8D
0886:  CLRF   x8E
0888:  CLRF   x8F
088A:  CLRF   x90
088C:  CLRF   x91
088E:  CLRF   x92
0890:  CLRF   x93
0892:  CLRF   x94
0894:  CLRF   x95
0896:  CLRF   x96
0898:  CLRF   x97
089A:  CLRF   x98
089C:  CLRF   x99
089E:  CLRF   x9A
08A0:  CLRF   x9B
08A2:  CLRF   x9C
08A4:  CLRF   x9D
08A6:  CLRF   x9E
08A8:  CLRF   x9F
08AA:  CLRF   xA0
08AC:  CLRF   xA1
08AE:  CLRF   xA2
08B0:  CLRF   xA3
08B2:  CLRF   xA4
08B4:  CLRF   xA5
08B6:  CLRF   xA6
08B8:  CLRF   xA7
08BA:  CLRF   xA8
08BC:  CLRF   xA9
08BE:  CLRF   xAA
08C0:  CLRF   xAB
08C2:  CLRF   xAC
08C4:  CLRF   xAD
08C6:  CLRF   xAE
08C8:  CLRF   xAF
08CA:  CLRF   xB0
08CC:  CLRF   xB1
08CE:  CLRF   xB2
08D0:  CLRF   xB3
08D2:  CLRF   xB4
08D4:  CLRF   xB5
08D6:  CLRF   xB6
08D8:  CLRF   xB7
08DA:  CLRF   xB8
08DC:  CLRF   xB9
08DE:  CLRF   xBA
08E0:  CLRF   xBB
08E2:  CLRF   xBC
08E4:  CLRF   xBD
08E6:  CLRF   xBE
08E8:  CLRF   xBF
08EA:  CLRF   xC0
08EC:  CLRF   xC1
08EE:  CLRF   xC2
08F0:  CLRF   xC3
08F2:  CLRF   xC4
08F4:  CLRF   xC5
08F6:  CLRF   xC6
08F8:  CLRF   xC7
08FA:  CLRF   xC8
08FC:  CLRF   xC9
08FE:  CLRF   xCA
0900:  CLRF   xCB
0902:  CLRF   xCC
0904:  CLRF   xCD
0906:  CLRF   xCE
0908:  CLRF   xCF
090A:  CLRF   xD0
090C:  CLRF   xD1
090E:  CLRF   xD2
0910:  CLRF   xD3
0912:  CLRF   xD4
0914:  CLRF   xD5
0916:  CLRF   xD6
0918:  CLRF   xD7
091A:  CLRF   xD8
091C:  CLRF   xD9
091E:  CLRF   xDA
0920:  CLRF   xDB
0922:  CLRF   xDC
0924:  CLRF   xDD
0926:  CLRF   xDE
0928:  CLRF   xDF
092A:  CLRF   xE0
092C:  CLRF   xE1
092E:  CLRF   xE2
0930:  CLRF   xE3
0932:  CLRF   xE4
0934:  CLRF   xE5
0936:  CLRF   xE6
0938:  CLRF   xE7
093A:  CLRF   xE8
093C:  CLRF   xE9
093E:  CLRF   xEA
0940:  CLRF   xEB
0942:  CLRF   xEC
0944:  CLRF   xED
0946:  CLRF   xEE
0948:  CLRF   xEF
094A:  CLRF   xF0
094C:  CLRF   xF1
094E:  CLRF   xF2
0950:  CLRF   xF3
0952:  CLRF   xF4
0954:  CLRF   xF5
0956:  CLRF   xF6
0958:  CLRF   xF7
095A:  CLRF   xF8
095C:  CLRF   xF9
095E:  CLRF   xFA
0960:  CLRF   xFB
0962:  CLRF   xFC
0964:  CLRF   xFD
0966:  CLRF   xFE
0968:  CLRF   xFF
096A:  MOVLB  1
096C:  CLRF   x00
096E:  CLRF   x01
0970:  CLRF   x02
0972:  CLRF   x03
0974:  CLRF   x04
0976:  CLRF   x05
0978:  CLRF   x06
097A:  CLRF   x07
097C:  CLRF   x08
097E:  CLRF   x09
0980:  CLRF   x0A
0982:  CLRF   x0B
0984:  CLRF   x0C
0986:  CLRF   x0D
0988:  CLRF   x0E
098A:  CLRF   x0F
098C:  CLRF   x10
098E:  CLRF   x11
0990:  CLRF   x12
0992:  CLRF   x13
0994:  CLRF   x14
0996:  CLRF   x15
0998:  CLRF   x16
099A:  CLRF   x17
099C:  CLRF   x18
099E:  CLRF   x19
09A0:  CLRF   x1A
09A2:  CLRF   x1B
09A4:  CLRF   x1C
09A6:  CLRF   x1D
09A8:  CLRF   x1E
09AA:  CLRF   x1F
09AC:  CLRF   x20
09AE:  CLRF   x21
09B0:  CLRF   x22
09B2:  CLRF   x23
09B4:  CLRF   x24
09B6:  CLRF   x25
09B8:  CLRF   x26
09BA:  CLRF   x27
09BC:  CLRF   x28
09BE:  CLRF   x29
09C0:  CLRF   x2A
09C2:  CLRF   x2B
09C4:  CLRF   x2C
09C6:  CLRF   x2D
09C8:  CLRF   x2E
09CA:  CLRF   x2F
09CC:  CLRF   x30
09CE:  CLRF   x31
09D0:  CLRF   x32
09D2:  CLRF   x33
09D4:  CLRF   x34
09D6:  CLRF   x35
09D8:  CLRF   x36
09DA:  CLRF   x37
09DC:  CLRF   x38
09DE:  CLRF   x39
09E0:  CLRF   x3A
09E2:  CLRF   x3B
09E4:  CLRF   x3C
09E6:  CLRF   x3D
09E8:  CLRF   x3E
09EA:  CLRF   x3F
09EC:  CLRF   x40
09EE:  CLRF   x41
09F0:  CLRF   x42
09F2:  CLRF   x43
09F4:  CLRF   x44
09F6:  CLRF   x45
09F8:  CLRF   x46
09FA:  CLRF   x47
09FC:  CLRF   x48
09FE:  CLRF   x49
0A00:  CLRF   x4A
0A02:  CLRF   x4B
0A04:  CLRF   x4C
0A06:  CLRF   x4D
0A08:  CLRF   x4E
0A0A:  CLRF   x4F
0A0C:  CLRF   x50
0A0E:  CLRF   x51
0A10:  CLRF   x52
0A12:  CLRF   x53
0A14:  CLRF   x54
0A16:  CLRF   x55
0A18:  CLRF   x56
0A1A:  CLRF   x57
0A1C:  CLRF   x58
0A1E:  CLRF   x59
0A20:  CLRF   x5A
0A22:  CLRF   x5B
0A24:  CLRF   x5C
0A26:  CLRF   x5D
0A28:  CLRF   x5E
0A2A:  CLRF   x5F
0A2C:  CLRF   x60
0A2E:  CLRF   x61
0A30:  CLRF   x62
0A32:  CLRF   x63
0A34:  CLRF   x64
0A36:  CLRF   x65
0A38:  CLRF   x66
0A3A:  CLRF   x67
0A3C:  CLRF   x68
0A3E:  CLRF   x69
0A40:  CLRF   x6A
0A42:  CLRF   x6B
0A44:  CLRF   x6C
0A46:  CLRF   x6D
0A48:  CLRF   x6E
0A4A:  CLRF   x6F
0A4C:  CLRF   x70
0A4E:  CLRF   x71
0A50:  CLRF   x72
0A52:  CLRF   x73
0A54:  CLRF   x74
0A56:  CLRF   x75
0A58:  CLRF   x76
0A5A:  CLRF   x77
0A5C:  CLRF   x78
0A5E:  CLRF   x79
0A60:  CLRF   x7A
0A62:  CLRF   x7B
0A64:  CLRF   x7C
0A66:  CLRF   x7D
0A68:  CLRF   x7E
0A6A:  CLRF   x7F
0A6C:  CLRF   x80
0A6E:  CLRF   x81
0A70:  CLRF   x82
0A72:  CLRF   x83
0A74:  CLRF   x84
0A76:  CLRF   x85
0A78:  CLRF   x86
0A7A:  CLRF   x87
0A7C:  CLRF   x88
0A7E:  CLRF   x89
0A80:  CLRF   x8A
0A82:  CLRF   x8B
0A84:  CLRF   x8C
0A86:  CLRF   x8D
0A88:  CLRF   x8E
0A8A:  CLRF   x8F
0A8C:  CLRF   x90
0A8E:  CLRF   x91
0A90:  CLRF   x92
0A92:  CLRF   x93
0A94:  CLRF   x94
0A96:  CLRF   x95
0A98:  CLRF   x96
0A9A:  CLRF   x97
0A9C:  CLRF   x98
0A9E:  CLRF   x99
0AA0:  CLRF   x9A
0AA2:  CLRF   x9B
0AA4:  CLRF   x9C
0AA6:  CLRF   x9D
0AA8:  CLRF   x9E
0AAA:  CLRF   x9F
0AAC:  CLRF   xA0
0AAE:  CLRF   xA1
0AB0:  CLRF   xA2
0AB2:  CLRF   xA3
0AB4:  CLRF   xA4
0AB6:  CLRF   xA5
0AB8:  CLRF   xA6
0ABA:  CLRF   xA7
0ABC:  CLRF   xA8
0ABE:  CLRF   xA9
0AC0:  CLRF   xAA
0AC2:  CLRF   xAB
0AC4:  CLRF   xAC
0AC6:  CLRF   xAD
0AC8:  CLRF   xAE
0ACA:  CLRF   xAF
0ACC:  CLRF   xB0
0ACE:  CLRF   xB1
0AD0:  CLRF   xB2
0AD2:  CLRF   xB3
0AD4:  CLRF   xB4
0AD6:  CLRF   xB5
0AD8:  CLRF   xB6
0ADA:  CLRF   xB7
0ADC:  CLRF   xB8
0ADE:  CLRF   xB9
0AE0:  CLRF   xBA
0AE2:  CLRF   xBB
0AE4:  CLRF   xBC
0AE6:  CLRF   xBD
0AE8:  CLRF   xBE
0AEA:  CLRF   xBF
0AEC:  CLRF   xC0
0AEE:  CLRF   xC1
0AF0:  CLRF   xC2
0AF2:  CLRF   xC3
0AF4:  CLRF   xC4
0AF6:  CLRF   xC5
0AF8:  CLRF   xC6
0AFA:  CLRF   xC7
0AFC:  CLRF   xC8
0AFE:  CLRF   xC9
0B00:  CLRF   xCA
0B02:  CLRF   xCB
0B04:  CLRF   xCC
0B06:  CLRF   xCD
0B08:  CLRF   xCE
0B0A:  CLRF   xCF
0B0C:  CLRF   xD0
0B0E:  CLRF   xD1
0B10:  CLRF   xD2
0B12:  CLRF   xD3
0B14:  CLRF   xD4
0B16:  CLRF   xD5
0B18:  CLRF   xD6
0B1A:  CLRF   xD7
0B1C:  CLRF   xD8
0B1E:  CLRF   xD9
0B20:  CLRF   xDA
0B22:  CLRF   xDB
0B24:  CLRF   xDC
0B26:  CLRF   xDD
0B28:  CLRF   xDE
0B2A:  CLRF   xDF
0B2C:  CLRF   xE0
0B2E:  CLRF   xE1
0B30:  CLRF   xE2
0B32:  CLRF   xE3
0B34:  CLRF   xE4
0B36:  CLRF   xE5
0B38:  CLRF   xE6
0B3A:  CLRF   xE7
0B3C:  CLRF   xE8
0B3E:  CLRF   xE9
0B40:  CLRF   xEA
0B42:  CLRF   xEB
0B44:  CLRF   xEC
0B46:  CLRF   xED
0B48:  CLRF   xEE
0B4A:  CLRF   xEF
0B4C:  CLRF   xF0
0B4E:  CLRF   xF1
0B50:  CLRF   xF2
0B52:  CLRF   xF3
0B54:  CLRF   xF4
0B56:  CLRF   xF5
0B58:  CLRF   xF6
0B5A:  CLRF   xF7
0B5C:  CLRF   xF8
0B5E:  CLRF   xF9
0B60:  CLRF   xFA
0B62:  CLRF   xFB
0B64:  CLRF   xFC
0B66:  CLRF   xFD
0B68:  CLRF   xFE
0B6A:  CLRF   xFF
0B6C:  MOVLB  2
0B6E:  CLRF   x00
0B70:  CLRF   x01
0B72:  CLRF   x02
0B74:  CLRF   x03
0B76:  CLRF   x04
0B78:  CLRF   x05
0B7A:  CLRF   x06
0B7C:  CLRF   x07
0B7E:  CLRF   x08
0B80:  CLRF   x09
0B82:  CLRF   x0A
0B84:  CLRF   x0B
0B86:  CLRF   x0C
0B88:  CLRF   x0D
0B8A:  CLRF   x0E
0B8C:  CLRF   x0F
0B8E:  CLRF   x10
0B90:  CLRF   x11
0B92:  CLRF   x12
0B94:  CLRF   x13
0B96:  CLRF   x14
0B98:  CLRF   x15
0B9A:  CLRF   x16
0B9C:  CLRF   x17
0B9E:  CLRF   x18
0BA0:  CLRF   x19
0BA2:  CLRF   x1A
0BA4:  CLRF   x1B
0BA6:  CLRF   x1C
0BA8:  CLRF   x1D
0BAA:  CLRF   x1E
0BAC:  BCF    x21.0
.................... 	clear_interrupt(INT_CCP1); 
0BAE:  BCF    F9E.2
.................... 	enable_interrupts(INT_CCP1); 
0BB0:  BSF    F9D.2
.................... 	enable_interrupts(GLOBAL); 
0BB2:  MOVLW  C0
0BB4:  IORWF  FF2,F
.................... 	setup_ccp1(CCP_CAPTURE_RE); 
0BB6:  BSF    F94.2
0BB8:  CLRF   FBD
0BBA:  MOVLW  05
0BBC:  MOVWF  FBD
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
0BBE:  MOVLW  B5
0BC0:  MOVWF  FCD
.................... 	while (TRUE) { 
.................... 		if (!input(PIN_B0) | ctrl) { 
0BC2:  BSF    F93.0
0BC4:  MOVLW  00
0BC6:  BTFSS  F81.0
0BC8:  MOVLW  01
0BCA:  MOVWF  x23
0BCC:  MOVLW  00
0BCE:  BTFSC  x21.0
0BD0:  MOVLW  01
0BD2:  IORWF  x23,W
0BD4:  BZ    0C88
.................... 			delay_ms(50); 
0BD6:  MOVLW  32
0BD8:  MOVWF  x23
0BDA:  MOVLB  0
0BDC:  CALL   011C
.................... 			if (!input(PIN_B0) | ctrl) { 
0BE0:  BSF    F93.0
0BE2:  MOVLW  00
0BE4:  BTFSS  F81.0
0BE6:  MOVLW  01
0BE8:  MOVLB  2
0BEA:  MOVWF  x23
0BEC:  MOVLW  00
0BEE:  BTFSC  x21.0
0BF0:  MOVLW  01
0BF2:  IORWF  x23,W
0BF4:  BZ    0C88
.................... 				printf("\fEscrevendo"); 
0BF6:  MOVLW  08
0BF8:  MOVWF  FF6
0BFA:  MOVLW  01
0BFC:  MOVWF  FF7
0BFE:  MOVLB  0
0C00:  CALL   019A
.................... 				for (ptr = (int *) tempo; *ptr; ptr++) { 
0C04:  MOVLB  2
0C06:  CLRF   x23
0C08:  MOVLW  1B
0C0A:  MOVFF  223,220
0C0E:  MOVWF  x1F
0C10:  MOVFF  220,03
0C14:  MOVFF  21F,FE9
0C18:  MOVFF  220,FEA
0C1C:  MOVF   FEF,F
0C1E:  BZ    0C76
.................... 					write_eeprom(addr++, *ptr); 
0C20:  MOVF   x1E,W
0C22:  MOVWF  03
0C24:  MOVF   x1D,W
0C26:  INCF   x1D,F
0C28:  BTFSC  FD8.2
0C2A:  INCF   x1E,F
0C2C:  MOVWF  x22
0C2E:  MOVFF  03,223
0C32:  MOVFF  220,03
0C36:  MOVF   x1F,W
0C38:  MOVWF  FE9
0C3A:  MOVFF  03,FEA
0C3E:  MOVFF  FEF,224
0C42:  MOVFF  222,FA9
0C46:  MOVFF  224,FA8
0C4A:  BCF    FA6.6
0C4C:  BCF    FA6.7
0C4E:  BSF    FA6.2
0C50:  MOVF   FF2,W
0C52:  MOVWF  00
0C54:  BCF    FF2.7
0C56:  MOVLB  F
0C58:  MOVLW  55
0C5A:  MOVWF  FA7
0C5C:  MOVLW  AA
0C5E:  MOVWF  FA7
0C60:  BSF    FA6.1
0C62:  BTFSC  FA6.1
0C64:  BRA    0C62
0C66:  BCF    FA6.2
0C68:  MOVF   00,W
0C6A:  IORWF  FF2,F
.................... 				} 
0C6C:  MOVLB  2
0C6E:  INCF   x1F,F
0C70:  BTFSC  FD8.2
0C72:  INCF   x20,F
0C74:  BRA    0C10
.................... 				printf("Pronto"); 
0C76:  MOVLW  14
0C78:  MOVWF  FF6
0C7A:  MOVLW  01
0C7C:  MOVWF  FF7
0C7E:  MOVLB  0
0C80:  CALL   019A
.................... 				sleep(); 
0C84:  SLEEP 
0C86:  MOVLB  2
.................... 			} 
.................... 		} 
.................... 		printf("\f%.2f\n%lu", (float) tempo[cont - 1] * 8 / 10000, cont); 
0C88:  MOVLW  01
0C8A:  SUBWF  x1B,W
0C8C:  MOVWF  x22
0C8E:  MOVLW  00
0C90:  SUBWFB x1C,W
0C92:  MOVWF  x23
0C94:  BCF    FD8.0
0C96:  RLCF   x22,W
0C98:  MOVWF  02
0C9A:  RLCF   x23,W
0C9C:  MOVWF  03
0C9E:  MOVF   02,W
0CA0:  ADDLW  1B
0CA2:  MOVWF  FE9
0CA4:  MOVLW  00
0CA6:  ADDWFC 03,W
0CA8:  MOVWF  FEA
0CAA:  MOVFF  FEC,03
0CAE:  MOVF   FED,F
0CB0:  MOVFF  FEF,222
0CB4:  MOVFF  03,223
0CB8:  MOVLB  0
0CBA:  GOTO   01BA
0CBE:  MOVFF  00,222
0CC2:  MOVFF  01,223
0CC6:  MOVFF  02,224
0CCA:  MOVFF  03,225
0CCE:  MOVFF  03,236
0CD2:  MOVFF  02,235
0CD6:  MOVFF  01,234
0CDA:  MOVFF  00,233
0CDE:  MOVLB  2
0CE0:  CLRF   x3A
0CE2:  CLRF   x39
0CE4:  CLRF   x38
0CE6:  MOVLW  82
0CE8:  MOVWF  x37
0CEA:  MOVLB  0
0CEC:  CALL   01F2
0CF0:  MOVFF  00,222
0CF4:  MOVFF  01,223
0CF8:  MOVFF  02,224
0CFC:  MOVFF  03,225
0D00:  MOVFF  03,229
0D04:  MOVFF  02,228
0D08:  MOVFF  01,227
0D0C:  MOVFF  00,226
0D10:  MOVLB  2
0D12:  CLRF   x2D
0D14:  MOVLW  40
0D16:  MOVWF  x2C
0D18:  MOVLW  1C
0D1A:  MOVWF  x2B
0D1C:  MOVLW  8C
0D1E:  MOVWF  x2A
0D20:  MOVLB  0
0D22:  GOTO   02E8
0D26:  MOVFF  00,222
0D2A:  MOVFF  01,223
0D2E:  MOVFF  02,224
0D32:  MOVFF  03,225
0D36:  MOVLW  0C
0D38:  MOVLB  2
0D3A:  MOVWF  x33
0D3C:  MOVLB  0
0D3E:  CALL   0146
0D42:  MOVLW  89
0D44:  MOVWF  FE9
0D46:  MOVFF  225,229
0D4A:  MOVFF  224,228
0D4E:  MOVFF  223,227
0D52:  MOVFF  222,226
0D56:  MOVLW  02
0D58:  MOVLB  2
0D5A:  MOVWF  x2A
0D5C:  MOVLB  0
0D5E:  GOTO   0520
0D62:  MOVLW  0A
0D64:  MOVLB  2
0D66:  MOVWF  x33
0D68:  MOVLB  0
0D6A:  CALL   0146
0D6E:  MOVLW  10
0D70:  MOVWF  FE9
0D72:  MOVFF  21C,227
0D76:  MOVFF  21B,226
0D7A:  BRA    06C8
.................... 		delay_ms(500); 
0D7C:  MOVLW  02
0D7E:  MOVLB  2
0D80:  MOVWF  x22
0D82:  MOVLW  FA
0D84:  MOVWF  x23
0D86:  MOVLB  0
0D88:  CALL   011C
0D8C:  MOVLB  2
0D8E:  DECFSZ x22,F
0D90:  BRA    0D82
.................... 	} 
0D92:  BRA    0BC2
.................... } 
0D94:  SLEEP 

Configuration Fuses:
   Word  1: 2600   H4 NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C000   PROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
